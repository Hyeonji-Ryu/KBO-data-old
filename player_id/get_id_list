""" 목표: 매 시합마다 출전하는 KBO 선수들의 선수 id를 크롤링해서 dict(list(dict)) 형식으로 저장하고 table 형태로 정리하기
    
    TODO:
    - [x] 경기 별 등록 선수 목록을 크롤링 하기
    - [x] 등록 선수 목록의 이름을 통해 선수 id 크롤링 하기
    - [ ] 선수 id 목록 table로 정리하기
    output
-------
> batter_list, pitcher_list = crawling_page.player_name(20210421,20210423)
> searching_players(batter_list)
{'list': [{'51003': {'ID': '51003',
    '이름': '권동진',
    '현재 상태': 'KBO',
    'team': 'KT'}},
  {'62415': {'ID': '62415', '이름': '박해민', '현재 상태': 'KBO', 'team': '삼성'}},
  {'67341': {'ID': '67341', '이름': '이정후', '현재 상태': 'KBO', 'team': '키움'}},
  ...
HOW TO USE
-------
1. 필요한 라이브러리와 .py 파일을 읽어온다. 
2. 선수 id를 크롤링하는 함수를 정의한다.
3. searching_players 함수 사용시 만약 error_list가 발생한다면 해당 선수들만 다시 크롤링한다.
4. error_list가 없다면 선수들의 id를 저장한다.
"""

import crawling_page 
import requests
from bs4 import BeautifulSoup as bs
import configparser

config = configparser.ConfigParser()
config.read('config.ini')
player_search_url = eval(config['DEFAULT']['player_search_URL'])

def searching(name):
    url = (f'{player_search_url}{name}')
    r = requests.post(url)
    try:
        soup = BeautifulSoup(r.text, "lxml")
        table = soup.find('table')
        table_rows = table.find_all('a')
        tds = table.find_all('td')
        temp = [parsing_player_table(table_row, tds) for table_row in table_rows]
        res = [{item['ID']:item} for item in temp]
    except:
        res = False
    return (res)

def parsing_player_table(table_row, tds):
    if str(table_row).split('/')[1] == 'Futures':
        status = 'Futures'
    elif str(table_row).split('/')[2] == 'Retire':
        status = '은퇴'
    else:
        status = 'KBO'
    player_id = str(table_row).split('playerId=')[1].split('">')[0]
    team = tds[2].get_text()
    name = table_row.get_text()
    return{"ID":player_id, "이름":name, "현재 상태":status, "team": team}

def searching_players(players_list):
    total = []
    error_list =[]
    
    for name in players_list:
        temp = searching(name)
        if len(temp) == 0:
            error_list.append(name)
        else:
            total += temp
    return {"list":total, "error_list":error_list}
